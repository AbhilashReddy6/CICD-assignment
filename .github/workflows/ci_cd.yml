#  GitHub Actions Workflow for Flask CI/CD
#  Runs linting, testing, and Docker deployment

name: Flask App - CI and Docker Deployment

on:
  push:
    branches: [ "master", "main", "ci-cd-*" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:
  #### Continuous Integration ####
  test_and_lint:
    name: Lint and Test (Flask Backend)
    runs-on: ubuntu-latest

    steps:
      ### Checkout the repository code ###
      - name: Checkout Repository
        uses: actions/checkout@v4

      ### Set up the Python environment ###
      - name: Configure Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      ### Install project dependencies and testing tools ###
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install flake8 pytest

      ### Run linting to check code quality ###
      - name: Run Code Linting
        run: |
          if [ ! -f .flake8 ]; then
            echo "[flake8]" > .flake8
            echo "max-line-length = 100" >> .flake8
            echo "exclude = .git,__pycache__,venv,.venv" >> .flake8
          fi
          flake8 .

      ### Run all available unit tests ###
      - name: Execute Unit Tests
        run: |
          if ls tests/*.py >/dev/null 2>&1 || ls test_*.py >/dev/null 2>&1; then
            pytest -q
          else
            echo " No test files found. Skipping pytest."
          fi

  ### Continuous Deployment ###
  publish_image:
    name: Build and Push Docker Image
    needs: test_and_lint
    runs-on: ubuntu-latest
    environment: prod 

    steps:
      ### Checkout code again for the deployment stage ###
      - name: Pull Source Code
        uses: actions/checkout@v4

      ### Build Docker image from Dockerfile ###
      - name: Build Docker Container
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend_flask:latest .

      ### Log in to Docker Hub using secrets ###
      - name: Docker Hub Login
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      ### Push the built image to Docker Hub ###
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend_flask:latest
